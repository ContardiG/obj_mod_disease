# -*- coding: utf-8 -*-
"""mod_obj_disease.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PYIoaJ6Ysx651T3uOEwpZJp8IIZdZheK
"""

import matplotlib.pyplot as plt
import numpy as np

class modeler:
  def __init__(self, smodel, smethod, beta = 0.2, gamma=1/14, alpha=1/5, lamb=0., mu=0.):
    '''
    
    Creation of a model.
    PARAMETERS >>
    beta       : 
    gamma      : inverse of 2 weeks in days
    alpha      : 
    lamb       : birth rate.
    mu         : death rate

    INTERNAL VARIABLES >> 
    dt  : a day divided in hours.
    kdt : number of hours in a day.
    '''

    self.days       = 365
    self.dt         = 1/24
    self.kdt        = 24
    self.beta       = beta
    self.gamma      = gamma
    self.alpha      = alpha
    self.lamb       = lamb
    self.mu         = mu

    self.smethod = smethod
    if smethod == 'euler':
        self.method= self.euler
    elif smethod == 'rk4':
        self.method = self.rk4
    
    self.smodel = smodel
    if smodel == 'seir':
      self.model= self.seir_mod
    elif smodel == 'sir':
        self.model = self.sir_mod


  def launch(self,population=1000000,inf0=10,exp0=0):
    '''
    
    Initializes the population according to the amount of it that will occupy each label.
    
    INPUT VARS >>
    population : redundant.
    inf0       : initial infected people.
    exp0       : initial exposed to disease people (only useful in SEIR model).

    INTERNAL VARS >>
    N : total population.
    S : susceptible people (in SIR models can be infected. In SEIR models they can't, they are going to expose itself to the disease).
    E : exposed people (only valid in SEIR models. Represent infectable people).
    I : infected people (they can infect other people).
    R : recovered people.

    OUTPUT VARS >>
    v : a numpy array with the inital population parameters.
    
    CALL EXAMPLE >>

    '''

    self.population = population
    I = inf0
    R = 0.
    E = 0.
    if self.smodel == 'seir':
      E = exp0
      if exp0 == 0:
        E = 4*inf0
    S = self.population - E - I
    if self.smodel == 'sir':
      v = np.array([S,I,R])
    elif self.smodel == 'seir':
      v = np.array([S,E,I,R])
    self.v=v
    
    return v


  def od_int(self,x0):
    '''
    
    Realices 24 integration using a method (euler/rk4) referring to 24 hours of a single day
    INPUT VARIABLES >>
    method : integration method euler or rk4;
    
    INTERNAL VARIABLES >>
    model  : epidemiological desease model sir_mod or seir_mod; 

    INPUT VARS >>INTERNAL VARS >>OUTPUT VARS >>CALL EXAMPLE >>
    
    CALL EXAMPLE >> integration(euler, sir_mod, S, I, R)
    '''
    
    for it in range(self.kdt): 
      x = self.method(x0) 

    return x


  def simulation(self,x0):
    '''

    INPUT VARS >>INTERNAL VARS >>OUTPUT VARS >>CALL EXAMPLE >>
    PARAMETERS >> method : integration method euler or rk4;
                  model  : epidemiological desease model sir_mod or seir_mod; 
                  days   : receives an integer wich indicates the amount of days to evaluate
                  *args  : receive multiple list as posicional parameters S,I,R or S,E,I,R;
    
    CALL EXAMPLE >> integration(euler, sir_mod, S, I, R)
    '''
    
    x_t=[]
    x_t.append(x0)
    for it in range(self.days): ##-- corregido, no pide argumento. Toma el valor de self.days.
      x = self.od_int(x0) 
      x_t.append(x)
      x0=x

    return x_t  


  def euler(self, xold): 
    '''
    Integration by Euler's method.

    INPUT VARS >>
    xold : an array with the data to integrate

    INTERNAL VARS >>
    model : epidemiological disease model to integrate. (sir_mod // seir_mod)
    dx    : variation on the values.

    OUTPUT VARS >>
    ar+dx : the individual values of each compartment added with their variation.
    '''
    dx=np.array(len(xold))
    for i in range(len(xold)):
      dx = self.model(xold)
    xnew = xold + dx
    
    return xnew



  def rk4(self,xold): 
    '''
    Integration by Runge-Kutta's 4th order method.
    
    INPUT VARS >>
    xold : an array with the data to integrate

    INTERNAL VARS >>
    model : epidemiological disease model to integrate. (sir_mod // seir_mod)
    dx    : variation on the values.

    OUTPUT VARS >>
    xold+(dx1+2.0*(dx2+dx3)+dx4)/6.0) : the individual values of each compartment added with their variation.
    '''

    dx1 = self.model( xold )
    dx2 = self.model( xold + 0.5 * dx1 )
    dx3 = self.model( xold + 0.5 * dx2 )
    dx4 = self.model( xold + dx3 )
    xnew = xold + ( dx1 + 2.0 * (dx2 + dx3) + dx4 ) / 6.0
    
    return xnew


  def sir_mod(self,array):
    '''
    
    SIR model for epidemic diseases.
    
    INPUT VARS >>
    
    INTERNAL VARS >>
    
    OUTPUT VARS >>

    CALL EXAMPLE >>
        
    '''

    S0, I0, R0 = array[0], array[1], array[2]
    N0 = self.population   
    dS1 = - self.beta*(S0*I0/N0)*self.dt
    dI1 = (self.beta*(S0*I0/N0) - self.gamma*I0)*self.dt
    dR1 =  self.gamma*I0*self.dt

    return np.array([dS1, dI1, dR1])


  def seir_mod(self,array):
    '''
    
    SEIR model for epidemic diseases.
    
    INPUT VARS >>
    
    INTERNAL VARS >>
    
    OUTPUT VARS >>
    
    CALL EXAMPLE >>
    seir_mod(data, 1)
    '''


    S0, E0, I0, R0 = array[0], array[1], array[2], array[3]
    N0 = self.population
    S1 = (self.lamb*N0 - self.mu*S0 - self.beta*(S0*I0/N0)) * self.dt
    E1 = (self.beta*(S0*I0/N0) - (self.mu + self.alpha)*E0) * self.dt
    I1 = (self.alpha*E0 - (self.gamma + self.mu)*I0) * self.dt
    R1 = (self.gamma*I0 - self.mu*R0)*self.dt
    
    return np.array([S1, E1, I1, R1])

mdl1 = modeler('sir','rk4')
x0 = mdl1.launch(300000,50)
x_t = mdl1.simulation(x0)

help(mdl1)

def maximo (array, string):
    print ("El pico de", string, "se da el dia: ", int(np.argmax(array)))
    return